{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nexports.mergeRefs = mergeRefs;\nvar _react = require(\"react\");\nconst toFnRef = ref => !ref || typeof ref === 'function' ? ref : value => {\n  ref.current = value;\n};\nfunction mergeRefs(refA, refB) {\n  const a = toFnRef(refA);\n  const b = toFnRef(refB);\n  return value => {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\nfunction useMergedRefs(refA, refB) {\n  return (0, _react.useMemo)(() => mergeRefs(refA, refB), [refA, refB]);\n}\nvar _default = useMergedRefs;\nexports.default = _default;","map":{"version":3,"names":["exports","__esModule","default","mergeRefs","_react","require","toFnRef","ref","value","current","refA","refB","a","b","useMergedRefs","useMemo","_default"],"sources":["C:/Users/PRABHJOT SINGH/Desktop/gleam1/web-dev-projects/personal-portfolio/node_modules/@restart/ui/node_modules/@restart/hooks/cjs/useMergedRefs.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nexports.mergeRefs = mergeRefs;\nvar _react = require(\"react\");\nconst toFnRef = ref => !ref || typeof ref === 'function' ? ref : value => {\n  ref.current = value;\n};\nfunction mergeRefs(refA, refB) {\n  const a = toFnRef(refA);\n  const b = toFnRef(refB);\n  return value => {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\nfunction useMergedRefs(refA, refB) {\n  return (0, _react.useMemo)(() => mergeRefs(refA, refB), [refA, refB]);\n}\nvar _default = useMergedRefs;\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxBF,OAAO,CAACG,SAAS,GAAGA,SAAS;AAC7B,IAAIC,MAAM,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC7B,MAAMC,OAAO,GAAGC,GAAG,IAAI,CAACA,GAAG,IAAI,OAAOA,GAAG,KAAK,UAAU,GAAGA,GAAG,GAAGC,KAAK,IAAI;EACxED,GAAG,CAACE,OAAO,GAAGD,KAAK;AACrB,CAAC;AACD,SAASL,SAASA,CAACO,IAAI,EAAEC,IAAI,EAAE;EAC7B,MAAMC,CAAC,GAAGN,OAAO,CAACI,IAAI,CAAC;EACvB,MAAMG,CAAC,GAAGP,OAAO,CAACK,IAAI,CAAC;EACvB,OAAOH,KAAK,IAAI;IACd,IAAII,CAAC,EAAEA,CAAC,CAACJ,KAAK,CAAC;IACf,IAAIK,CAAC,EAAEA,CAAC,CAACL,KAAK,CAAC;EACjB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,aAAaA,CAACJ,IAAI,EAAEC,IAAI,EAAE;EACjC,OAAO,CAAC,CAAC,EAAEP,MAAM,CAACW,OAAO,EAAE,MAAMZ,SAAS,CAACO,IAAI,EAAEC,IAAI,CAAC,EAAE,CAACD,IAAI,EAAEC,IAAI,CAAC,CAAC;AACvE;AACA,IAAIK,QAAQ,GAAGF,aAAa;AAC5Bd,OAAO,CAACE,OAAO,GAAGc,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}